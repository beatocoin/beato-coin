"use client"

import React, { useEffect, useState } from "react"
import type { ChangeEvent, FormEvent } from "react"
import { Button } from "@submodule/components/ui/button"
import { Input } from "@submodule/components/ui/input"
import { Label } from "@submodule/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@submodule/components/ui/card"
import { createClient } from "@submodule/utils/supabase/client"
import Loading from '@submodule/components/ui/loading'
import { Loader2 } from "lucide-react"
import toast, { Toaster } from 'react-hot-toast'
import { Calendar } from "@submodule/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@submodule/components/ui/popover"
import { CalendarIcon } from "lucide-react"
import { format } from "date-fns"
import { cn } from "@submodule/lib/utils"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@submodule/components/ui/select"
import { useWalletProvider } from "@app/contexts/WalletProviderContext"
import { Switch } from '@submodule/components/ui/switch'
import {
  Modal,
  ModalContent,
  ModalHeader,
  ModalTitle,
  ModalTrigger,
} from '@submodule/components/ui/modal';
import { Copy } from 'lucide-react';
import { useTheme } from '@submodule/contexts/ThemeContext';

interface CryptoSettingsFormData {
  id?: string
  appkit_project_id: string
  presale_wallet_address: string
  presale_end_date: Date | null
  hard_cap: number
  starting_funds: number
  wallet_provider: string
  dev_mode?: boolean
  token_live?: boolean
  token_name: string
}

export default function CryptoSettingsForm() {
  const supabase = createClient()
  const [isLoading, setIsLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { providerType, setProviderType } = useWalletProvider()
  const [formData, setFormData] = useState<CryptoSettingsFormData>({
    appkit_project_id: '',
    presale_wallet_address: '',
    presale_end_date: null,
    hard_cap: 0,
    starting_funds: 0,
    wallet_provider: 'appkit',
    dev_mode: false,
    token_live: false,
    token_name: '',
  })
  const { colors } = useTheme();
  const sqlQuery = `-- Create the user_wallets table with UID as uppercase and balance_usd as numeric
CREATE TABLE public.user_wallets (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "UID" TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  email TEXT,
  user_role TEXT,
  public_key TEXT,
  private_key TEXT,
  auth_tag TEXT,
  pin_hash TEXT,
  pin_salt TEXT,
  last_pin_attempt TIMESTAMP WITH TIME ZONE,
  pin_attempt_count INT DEFAULT 0,
  salt TEXT,
  iv TEXT,
  balance_usd numeric
);

-- Enable Row Level Security (RLS)
ALTER TABLE public.user_wallets ENABLE ROW LEVEL SECURITY;

-- Allow anon select for all rows (for testing, restrict as needed)
CREATE POLICY "Allow anon select" ON public.user_wallets
FOR SELECT
USING (true);

-- Allow users to SELECT their own wallet row
CREATE POLICY "Users can select their own wallet"
ON public.user_wallets
FOR SELECT
TO authenticated
USING ("UID" = auth.uid()::text);

-- Allow users to INSERT their own wallet row
CREATE POLICY "Users can insert their own wallet"
ON public.user_wallets
FOR INSERT
TO authenticated
WITH CHECK ("UID" = auth.uid()::text);

-- Allow users to UPDATE their own wallet row
CREATE POLICY "Users can update their own wallet"
ON public.user_wallets
FOR UPDATE
TO authenticated
USING ("UID" = auth.uid()::text);

-- Create the crypto_settings table
create table if not exists public.crypto_settings (
  id uuid primary key default uuid_generate_v4(),
  appkit_project_id text,
  presale_wallet_address text,
  presale_end_date timestamp with time zone,
  hard_cap numeric,
  starting_funds numeric,
  wallet_provider text,
  dev_mode boolean default false
);

-- Enable Row Level Security (RLS)
alter table public.crypto_settings enable row level security;

-- Create a policy to allow public read access
CREATE POLICY "Allow public read access to presale_end_date"
  ON crypto_settings
  FOR SELECT
  USING (true);

-- Policy: Only allow admin users to select, insert, update, and delete
create policy "Admins can manage crypto_settings"
  on public.crypto_settings
  for all
  using (
    exists (
      select 1 from public.user_data
      where "UID" = auth.uid()
        and user_role = 'admin'
    )
  );`;

  // Load settings from database
  useEffect(() => {
    const loadSettings = async () => {
      try {
        const { data, error } = await supabase
          .from('crypto_settings')
          .select('*')
          .single()

        if (error) throw error

        if (data) {
          const walletProvider = data.wallet_provider || 'appkit'
          
          // Update the context state
          setProviderType(walletProvider as 'appkit' | 'moralis')
          
          setFormData({
            ...data,
            presale_end_date: data.presale_end_date ? new Date(data.presale_end_date) : null,
            hard_cap: Number(data.hard_cap),
            starting_funds: Number(data.starting_funds),
            wallet_provider: walletProvider,
            dev_mode: data.dev_mode ?? false,
            token_live: data.token_live ?? false,
            token_name: data.token_name || '',
          })
        }
      } catch (error) {
        console.error('Error loading crypto settings:', error)
        toast.error('Failed to load crypto settings. Please try again.')
      } finally {
        setIsLoading(false)
      }
    }

    loadSettings()
  }, [supabase, setProviderType])

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)

    try {
      let error: any = null;
      if (formData.id) {
        // Update existing row
        const { error: updateError } = await supabase
          .from('crypto_settings')
          .update({
            appkit_project_id: formData.appkit_project_id,
            presale_wallet_address: formData.presale_wallet_address,
            presale_end_date: formData.presale_end_date,
            hard_cap: formData.hard_cap,
            starting_funds: formData.starting_funds,
            wallet_provider: formData.wallet_provider,
            dev_mode: formData.dev_mode ?? false,
            token_live: formData.token_live ?? false,
            token_name: formData.token_name,
          })
          .eq('id', formData.id)
        error = updateError;
      } else {
        // Insert new row
        const { error: insertError } = await supabase
          .from('crypto_settings')
          .insert({
            appkit_project_id: formData.appkit_project_id,
            presale_wallet_address: formData.presale_wallet_address,
            presale_end_date: formData.presale_end_date,
            hard_cap: formData.hard_cap,
            starting_funds: formData.starting_funds,
            wallet_provider: formData.wallet_provider,
            dev_mode: formData.dev_mode ?? false,
            token_live: formData.token_live ?? false,
            token_name: formData.token_name,
          })
        error = insertError;
      }

      if (error) throw error
      setProviderType(formData.wallet_provider as 'appkit' | 'moralis')
      toast.success('Crypto settings saved successfully!')
    } catch (error) {
      console.error('Error saving crypto settings:', error)
      toast.error('Failed to save crypto settings. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value, type } = e.target
    
    if (type === 'number') {
      setFormData({
        ...formData,
        [name]: parseFloat(value) || 0
      })
    } else {
      setFormData({
        ...formData,
        [name]: value
      })
    }
  }

  const handleDateChange = (date: Date | undefined) => {
    setFormData({
      ...formData,
      presale_end_date: date || null
    })
  }

  const handleWalletProviderChange = (value: string) => {
    if (value !== 'appkit' && value !== 'moralis') return;
    
    setFormData({
      ...formData,
      wallet_provider: value
    })
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
      .then(() => {
        toast.success('Copied to clipboard!')
      })
      .catch((error: unknown) => {
        console.error('Failed to copy:', error)
        toast.error('Failed to copy to clipboard')
      })
  };

  if (isLoading) {
    return <Loading />
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Toaster position="top-right" />
      <Card>
        <CardHeader>
          <CardTitle>Crypto Settings</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 gap-4">
            <div className="space-y-2">
              <Label htmlFor="token_name">Token Name</Label>
              <Input
                id="token_name"
                name="token_name"
                value={formData.token_name}
                onChange={handleChange}
                placeholder="Enter the token name"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="wallet_provider">Wallet Provider</Label>
              <Select
                value={formData.wallet_provider}
                onValueChange={handleWalletProviderChange}
              >
                <SelectTrigger id="wallet_provider" className="w-full">
                  <SelectValue placeholder="Select wallet provider" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="appkit">
                    <div className="flex items-center">
                      <span>AppKit</span>
                      <span className="ml-2 text-xs text-gray-500">(Default)</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="moralis">
                    <div className="flex items-center">
                      <span>Moralis</span>
                      <span className="ml-2 text-xs text-gray-500">(Alternative)</span>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
              <p className="text-sm text-gray-500">
                Select which provider to use for wallet connectivity and crypto purchases
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="appkit_project_id">AppKit Project ID</Label>
              <Input 
                id="appkit_project_id"
                name="appkit_project_id"
                value={formData.appkit_project_id}
                onChange={handleChange}
                placeholder="Your Reown AppKit Project ID"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="presale_wallet_address">Pre-Sale Wallet Address</Label>
              <Input 
                id="presale_wallet_address"
                name="presale_wallet_address"
                value={formData.presale_wallet_address}
                onChange={handleChange}
                placeholder="0x..."
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="presale_end_date">Pre-Sale End Date</Label>
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "w-full justify-start text-left font-normal",
                      !formData.presale_end_date && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {formData.presale_end_date ? (
                      format(formData.presale_end_date, "PPP")
                    ) : (
                      <span>Pick a date</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0">
                  <Calendar
                    mode="single"
                    selected={formData.presale_end_date || undefined}
                    onSelect={handleDateChange}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label htmlFor="hard_cap">Hard Cap (USD)</Label>
              <Input 
                id="hard_cap"
                name="hard_cap"
                type="number"
                value={formData.hard_cap}
                onChange={handleChange}
                placeholder="100000"
                min="0"
                step="0.01"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="starting_funds">Starting Funds (USD)</Label>
              <Input 
                id="starting_funds"
                name="starting_funds"
                type="number"
                value={formData.starting_funds}
                onChange={handleChange}
                placeholder="0"
                min="0"
                step="0.01"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="token_live">Token Live</Label>
              <div className="flex items-center space-x-2">
                <Switch
                  id="token_live"
                  name="token_live"
                  checked={!!formData.token_live}
                  onCheckedChange={(checked: boolean) => setFormData({ ...formData, token_live: checked })}
                />
                <p className="text-sm text-muted-foreground">
                  Toggle whether the token is live for users.
                </p>
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="dev_mode">Dev Mode</Label>
              <div className="flex items-center space-x-2">
                <Switch
                  id="dev_mode"
                  name="dev_mode"
                  checked={!!formData.dev_mode}
                  onCheckedChange={(checked: boolean) => setFormData({ ...formData, dev_mode: checked })}
                />
                <p className="text-sm text-muted-foreground">
                  Dev Mode will show the JSON API response on the wallet page for debugging.
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end items-center gap-4">
        <Modal>
          <ModalTrigger asChild>
            <Button
              type="button"
              style={{ backgroundColor: colors.accent1, color: '#fff' }}
              className="hover:opacity-90"
            >
              View Wallet Table SQL
            </Button>
          </ModalTrigger>
          <ModalContent>
            <ModalHeader>
              <ModalTitle>User Wallets Table SQL</ModalTitle>
            </ModalHeader>
            <div className="p-6">
              <div className="flex items-center gap-2 mb-4">
                <Button
                  variant="outline"
                  className="flex items-center gap-2"
                  onClick={() => copyToClipboard(sqlQuery)}
                >
                  <Copy size={16} />
                  Copy SQL
                </Button>
              </div>
              <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-xs">
                <code>{sqlQuery}</code>
              </pre>
            </div>
          </ModalContent>
        </Modal>
        <Button 
          type="submit" 
          disabled={isSubmitting}
          className="bg-[var(--color-primary)] hover:bg-[var(--color-primary)] text-white"
        >
          {isSubmitting ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Saving...
            </>
          ) : (
            'Save Changes'
          )}
        </Button>
      </div>
    </form>
  )
} 